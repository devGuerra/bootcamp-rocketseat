[{"C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\App.tsx":"1","C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\index.tsx":"2","C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\styles\\global.ts":"3","C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\pages\\Dashboard\\styles.ts":"4","C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\pages\\Dashboard\\index.tsx":"5","C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\pages\\Repository\\index.tsx":"6","C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\services\\api.ts":"7"},{"size":292,"mtime":1611866259347,"results":"8","hashOfConfig":"9"},{"size":197,"mtime":1611863648739,"results":"10","hashOfConfig":"9"},{"size":683,"mtime":1611866190695,"results":"11","hashOfConfig":"9"},{"size":2235,"mtime":1611870932005,"results":"12","hashOfConfig":"9"},{"size":2505,"mtime":1611871464718,"results":"13","hashOfConfig":"9"},{"size":185,"mtime":1611864303951,"results":"14","hashOfConfig":"9"},{"size":120,"mtime":1611868960983,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1s4ikob",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\App.tsx",[],"C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\index.tsx",[],"C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\styles\\global.ts",["31"],"C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\pages\\Dashboard\\styles.ts",[],"C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\pages\\Dashboard\\index.tsx",["32"],"import React, { useState, FormEvent, useEffect } from 'react';\r\nimport { FiChevronRight } from 'react-icons/fi'\r\n\r\nimport api from '../../services/api'\r\n\r\nimport logoImg from '../../assets/logo.svg'\r\nimport { Title, Form, Repositories, Error } from './styles'\r\n\r\ninterface Repository {\r\n  full_name: string\r\n  owner: {\r\n    login: string\r\n    avatar_url: string\r\n  }\r\n  description: string\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const [newRepo, setNewRepo] = useState('')\r\n  const [inputError, setInputError] = useState('')\r\n\r\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\r\n    const storagedRepositories = localStorage.getItem(\"@githubExplorer:repositories\")\r\n    if (storagedRepositories) {\r\n      return JSON.parse(storagedRepositories)\r\n    }\r\n    return []\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('@githubExplorer:repositories', JSON.stringify(repositories))\r\n  }, [repositories])\r\n\r\n  const handleAddRepository = async (event: FormEvent<HTMLFormElement>): Promise<void> => {\r\n    event.preventDefault()\r\n    if (!newRepo) {\r\n      setInputError('Digite o autor/nome do reposit贸rio.')\r\n      return\r\n    }\r\n\r\n\r\n    try {\r\n      const response = await api.get<Repository>(`repos/${newRepo}`)\r\n\r\n      const repository = response.data\r\n\r\n      setRepositories([...repositories, repository])\r\n      setNewRepo('')\r\n      setInputError('')\r\n    } catch (error) {\r\n      setInputError('Erro na busca por esse reposit贸rio.')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <img src={logoImg} alt=\"Github Explorer\" />\r\n      <Title>Explore reposit贸rios Github</Title>\r\n\r\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\r\n        <input\r\n          value={newRepo}\r\n          onChange={(e) => setNewRepo(e.target.value)}\r\n          placeholder=\"Digite o nome do reposit贸rio\"\r\n        />\r\n        <button type='submit'>Pesquisar</button>\r\n      </Form>\r\n\r\n      {\r\n        inputError && <Error>{inputError}</Error>\r\n      }\r\n\r\n      <Repositories>\r\n        {\r\n          repositories.map(repository => (\r\n            <a key={repository.full_name} href=\"\">\r\n              <img src={repository.owner.avatar_url} alt={repository.owner.login} />\r\n              <div>\r\n                <strong>{repository.full_name}</strong>\r\n                <p>{repository.description}</p>\r\n              </div>\r\n              <FiChevronRight size={20} />\r\n            </a>\r\n          ))\r\n        }\r\n      </Repositories>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\pages\\Repository\\index.tsx",[],"C:\\Users\\prosa\\Documents\\learn\\bootcamp-rocketseat\\aulas\\05-primeiro-projeto-react\\src\\services\\api.ts",[],{"ruleId":"33","severity":1,"message":"34","line":1,"column":10,"nodeType":"35","messageId":"36","endLine":1,"endColumn":27},{"ruleId":"37","severity":1,"message":"38","line":76,"column":13,"nodeType":"39","endLine":76,"endColumn":51},"@typescript-eslint/no-unused-vars","'defaultCipherList' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]